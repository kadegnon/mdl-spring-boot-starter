package be.unamur.info.mdl.groggy.ctrler;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import be.unamur.info.mdl.groggy.dal.entity.User;
import be.unamur.info.mdl.groggy.dal.UserRepository;

import java.util.HashMap;
import java.util.Map;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;


@RestController    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /api (after Application path)
public class MainController {

	private static final Logger LOG = LoggerFactory.getLogger(MainController.class);

	public static final String HELLO_TEXT = "Hello from Spring Boot Backend!";

	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;



	@RequestMapping(path = "/hello")
	public @ResponseBody String sayHello() {
		LOG.info("GET called on /hello resource");
		return HELLO_TEXT;
	}

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addUser (@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User newUser = new User(name,email);
		userRepository.save(newUser);
		return "Saved";
	}

	@RequestMapping(path = "/user", method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.CREATED)
	public @ResponseBody long addNewUser (@RequestParam String firstName, @RequestParam String lastName) {		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User user = new User(firstName, lastName);
		userRepository.save(user);

		LOG.info(user.toString() + " successfully saved into DB");

		return user.id();
	}


	@GetMapping(path="/user/{id}")
	public @ResponseBody User getUserById(@PathVariable("id") long id) {
		LOG.info("Reading user with id " + id + " from database.");
		return userRepository.findById(id).get();
	}



	@GetMapping(path="/all")
	public @ResponseBody Map<Long, User> getAllUsers() {
		// This returns a JSON or XML with the users
		Map<Long, User> users = new HashMap<Long, User>();
		for (User user :	 userRepository.findAll()) {
			users.put(user.id(), user);
		}
		return users;
	}
}
